@page "/availablecourrses"
@attribute [Authorize]
@inject ICoursesService CoursesService;
@inject IAccountService AccountService;
@inject NavigationManager NavigationManager;
@inject IAlertService AlertService;

<div class="card-body">
    @if (courses!=null && courses.Count > 0)
        {

        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width: 30%">Course Name</th>
                    <th style="width: 30%">Course Description</th>
                    <th style="width: 30%">Register for Course</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in courses)
                    {
                    <tr>
                        <td>@course.Name</td>
                        <td>@course.Description</td>
                        <td>
                            <button @onclick="@(() => RegisterUserForCouse(course.Id,UserId))" disabled="@course.IsDeleting" class="btn btn-primary">Register</button>
                        </td>
                    </tr>
                    }
            </tbody>
        </table>
        }
    else
        {
        <div class="card">
            <div class="card-body">
                <p class="card-text">
                    There are no courses available at the moment
                </p>
            </div>
        </div>
        }
</div>

@code {
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public IList<Models.Course> courses { get; set; }
    public async Task RegisterUserForCouse(string CourseId, string userId)
        {
        Console.WriteLine($"Reistering for a course with the id : {CourseId}");
        await CoursesService.RegisterStudentToCourse(CourseId, userId);

        NavigationManager.NavigateTo("/courses/list");
        StateHasChanged();
        }
}
