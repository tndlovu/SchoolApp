@page "/courses/add"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IAlertService AlertService
@inject ICoursesService CoursesService

<div class="card">
    <h4 class="card-header">Add new Course</h4>
    <div class="card-body">
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col">
            <label>Name</label>
            <InputText @bind-Value="model.Name" class="form-control" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        <div class="form-group col">
            <label>Description</label>
            <InputText @bind-Value="model.Description" class="form-control" />
            <ValidationMessage For="@(() => model.Description)" />
        </div>
    </div>
 
    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
                {
                <span class="spinner-border spinner-border-sm mr-1"></span>
                }
            Save
        </button>
        <NavLink href="/courses/list" class="btn btn-link">Cancel</NavLink>
    </div>
</EditForm>
</div>
</div>
@code {
    private AddCourse model = new AddCourse();
    private bool loading;
    private async void OnValidSubmit( )
        {
        loading = true;
        AlertService.Clear();
        try
            {
                
                AlertService.Info($"Registering the course {model.Name}");
                await  CoursesService.Register(model);
                loading = false;
                NavigationManager.NavigateTo("/course/list");
            }catch(Exception ex)
            {
                AlertService.Error(ex.Message);
                NavigationManager.NavigateTo("/courses/add");
                loading = false;
                StateHasChanged();
            }
        }
}
